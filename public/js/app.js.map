{"version":3,"sources":["app/config.js","app/example.js","app/game.js","app/gameObjects/CharacterObj.js","app/gameSprites/CharacterSpr.js","app/gameStart.js","app/main.js","app/mob.js","app/network/MapDataClient.js","app/network/NetworkManager.js","app/player.js","app/states/boot.js","app/states/login.js","app/states/play.js","app/toto.js","app/utils/ChatManager.js","app/utils/DomHelper.js","app/utils/Pathfinder.js","app/utils/ScoreBoard.js","app/wsconnect.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/dzDA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhIA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1MA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApFA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArxvGA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvnGA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtFA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzFA;AAAA","file":"public/js/app.js","sourcesContent":["'use strict';\n\nexports.ServerHost = \"localhost:8080\";\nexports.ServerTimeStep = 10;\n","\n// =============================================================================\n//  An Entity in the world.\n// =============================================================================\nvar Entity = function() {\n  this.x = 0;\n  this.speed = 2; // units/s\n  this.position_buffer = [];\n}\n\n// Apply user's input to this entity.\nEntity.prototype.applyInput = function(input) {\n  this.x += input.press_time*this.speed;\n}\n\n\n// =============================================================================\n//  A message queue with simulated network lag.\n// =============================================================================\nvar LagNetwork = function() {\n  this.messages = [];\n}\n\n// \"Send\" a message. Store each message with the timestamp when it should be\n// received, to simulate lag.\nLagNetwork.prototype.send = function(lag_ms, message) {\n  this.messages.push({recv_ts: +new Date() + lag_ms,\n                      payload: message});\n}\n\n// Returns a \"received\" message, or undefined if there are no messages available\n// yet.\nLagNetwork.prototype.receive = function() {\n  var now = +new Date();\n  for (var i = 0; i < this.messages.length; i++) {\n    var message = this.messages[i];\n    if (message.recv_ts <= now) {\n      this.messages.splice(i, 1);\n      return message.payload;\n    }\n  }\n}\n\n\n// =============================================================================\n//  The Client.\n// =============================================================================\nvar Client = function(canvas, status) {\n  // Local representation of the entities.\n  this.entities = {};\n\n  // Input state.\n  this.key_left = false;\n  this.key_right = false;\n\n  // Simulated network connection.\n  this.network = new LagNetwork();\n  this.server = null;\n  this.lag = 0;\n\n  // Unique ID of our entity. Assigned by Server on connection.\n  this.entity_id = null;\n\n  // Data needed for reconciliation.\n  this.client_side_prediction = false;\n  this.server_reconciliation = false;\n  this.input_sequence_number = 0;\n  this.pending_inputs = [];\n\n  // Entity interpolation toggle.\n  this.entity_interpolation = true;\n\n  // UI.\n  this.canvas = canvas;\n  this.status = status;\n\n  // Update rate.\n  this.setUpdateRate(50);\n}\n\n\nClient.prototype.setUpdateRate = function(hz) {\n  this.update_rate = hz;\n\n  clearInterval(this.update_interval);\n  this.update_interval = setInterval(\n    (function(self) { return function() { self.update(); }; })(this),\n    1000 / this.update_rate);\n}\n\n\n// Update Client state.\nClient.prototype.update = function() {\n  // Listen to the server.\n  this.processServerMessages();\n\n  if (this.entity_id == null) {\n    return;  // Not connected yet.\n  }\n\n  // Process inputs.\n  this.processInputs();\n\n  // Interpolate other entities.\n  if (this.entity_interpolation) {\n    this.interpolateEntities();\n  }\n\n  // Render the World.\n  renderWorld(this.canvas, this.entities);\n\n  // Show some info.\n  var info = \"Non-acknowledged inputs: \" + this.pending_inputs.length;\n  this.status.textContent = info;\n}\n\n\n// Get inputs and send them to the server.\n// If enabled, do client-side prediction.\nClient.prototype.processInputs = function() {\n  // Compute delta time since last update.\n  var now_ts = +new Date();\n  var last_ts = this.last_ts || now_ts;\n  var dt_sec = (now_ts - last_ts) / 1000.0;\n  this.last_ts = now_ts;\n\n  // Package player's input.\n  var input;\n  if (this.key_right) {\n    input = { press_time: dt_sec };\n  } else if (this.key_left) {\n    input = { press_time: -dt_sec };\n  } else {\n    // Nothing interesting happened.\n    return;\n  }\n\n  // Send the input to the server.\n  input.input_sequence_number = this.input_sequence_number++;\n  input.entity_id = this.entity_id;\n  this.server.network.send(this.lag, input);\n\n  // Do client-side prediction.\n  if (this.client_side_prediction) {\n    this.entities[this.entity_id].applyInput(input);\n  }\n\n  // Save this input for later reconciliation.\n  this.pending_inputs.push(input);\n}\n\n\n// Process all messages from the server, i.e. world updates.\n// If enabled, do server reconciliation.\nClient.prototype.processServerMessages = function() {\n  while (true) {\n    var message = this.network.receive();\n    if (!message) {\n      break;\n    }\n\n    // World state is a list of entity states.\n    for (var i = 0; i < message.length; i++) {\n      var state = message[i];\n\n      // If this is the first time we see this entity, create a local representation.\n      if (!this.entities[state.entity_id]) {\n        var entity = new Entity();\n        entity.entity_id = state.entity_id;\n        this.entities[state.entity_id] = entity;\n      }\n\n      var entity = this.entities[state.entity_id];\n\n      if (state.entity_id == this.entity_id) {\n        // Received the authoritative position of this client's entity.\n        entity.x = state.position;\n\n        if (this.server_reconciliation) {\n          // Server Reconciliation. Re-apply all the inputs not yet processed by\n          // the server.\n          var j = 0;\n          while (j < this.pending_inputs.length) {\n            var input = this.pending_inputs[j];\n            if (input.input_sequence_number <= state.last_processed_input) {\n              // Already processed. Its effect is already taken into account into the world update\n              // we just got, so we can drop it.\n              this.pending_inputs.splice(j, 1);\n            } else {\n              // Not processed by the server yet. Re-apply it.\n              entity.applyInput(input);\n              j++;\n            }\n          }\n        } else {\n          // Reconciliation is disabled, so drop all the saved inputs.\n          this.pending_inputs = [];\n        }\n      } else {\n        // Received the position of an entity other than this client's.\n\n        if (!this.entity_interpolation) {\n          // Entity interpolation is disabled - just accept the server's position.\n          entity.x = state.position;\n        } else {\n          // Add it to the position buffer.\n          var timestamp = +new Date();\n          entity.position_buffer.push([timestamp, state.position]);\n        }\n      }\n    }\n  }\n}\n\n\nClient.prototype.interpolateEntities = function() {\n  // Compute render timestamp.\n  var now = +new Date();\n  var render_timestamp = now - (1000.0 / server.update_rate);\n\n  for (var i in this.entities) {\n    var entity = this.entities[i];\n\n    // No point in interpolating this client's entity.\n    if (entity.entity_id == this.entity_id) {\n      continue;\n    }\n\n    // Find the two authoritative positions surrounding the rendering timestamp.\n    var buffer = entity.position_buffer;\n\n    // Drop older positions.\n    while (buffer.length >= 2 && buffer[1][0] <= render_timestamp) {\n      buffer.shift();\n    }\n\n    // Interpolate between the two surrounding authoritative positions.\n    if (buffer.length >= 2 && buffer[0][0] <= render_timestamp && render_timestamp <= buffer[1][0]) {\n      var x0 = buffer[0][1];\n      var x1 = buffer[1][1];\n      var t0 = buffer[0][0];\n      var t1 = buffer[1][0];\n\n      entity.x = x0 + (x1 - x0) * (render_timestamp - t0) / (t1 - t0);\n    }\n  }\n}\n\n\n// =============================================================================\n//  The Server.\n// =============================================================================\nvar Server = function(canvas, status) {\n  // Connected clients and their entities.\n  this.clients = [];\n  this.entities = [];\n\n  // Last processed input for each client.\n  this.last_processed_input = [];\n\n  // Simulated network connection.\n  this.network = new LagNetwork();\n\n  // UI.\n  this.canvas = canvas;\n  this.status = status;\n\n  // Default update rate.\n  this.setUpdateRate(10);\n}\n\nServer.prototype.connect = function(client) {\n  // Give the Client enough data to identify itself.\n  client.server = this;\n  client.entity_id = this.clients.length;\n  this.clients.push(client);\n\n  // Create a new Entity for this Client.\n  var entity = new Entity();\n  this.entities.push(entity);\n  entity.entity_id = client.entity_id;\n\n  // Set the initial state of the Entity (e.g. spawn point)\n  var spawn_points = [4, 6];\n  entity.x = spawn_points[client.entity_id];\n}\n\nServer.prototype.setUpdateRate = function(hz) {\n  this.update_rate = hz;\n\n  clearInterval(this.update_interval);\n  this.update_interval = setInterval(\n    (function(self) { return function() { self.update(); }; })(this),\n    1000 / this.update_rate);\n}\n\nServer.prototype.update = function() {\n  this.processInputs();\n  this.sendWorldState();\n  renderWorld(this.canvas, this.entities);\n}\n\n\n// Check whether this input seems to be valid (e.g. \"make sense\" according\n// to the physical rules of the World)\nServer.prototype.validateInput = function(input) {\n  if (Math.abs(input.press_time) > 1/40) {\n    return false;\n  }\n  return true;\n}\n\n\nServer.prototype.processInputs = function() {\n  // Process all pending messages from clients.\n  while (true) {\n    var message = this.network.receive();\n    if (!message) {\n      break;\n    }\n\n    // Update the state of the entity, based on its input.\n    // We just ignore inputs that don't look valid; this is what prevents clients from cheating.\n    if (this.validateInput(message)) {\n      var id = message.entity_id;\n      this.entities[id].applyInput(message);\n      this.last_processed_input[id] = message.input_sequence_number;\n    }\n\n  }\n\n  // Show some info.\n  var info = \"Last acknowledged input: \";\n  for (var i = 0; i < this.clients.length; ++i) {\n    info += \"Player \" + i + \": #\" + (this.last_processed_input[i] || 0) + \"   \";\n  }\n  this.status.textContent = info;\n}\n\n\n// Send the world state to all the connected clients.\nServer.prototype.sendWorldState = function() {\n  // Gather the state of the world. In a real app, state could be filtered to avoid leaking data\n  // (e.g. position of invisible enemies).\n  var world_state = [];\n  var num_clients = this.clients.length;\n  for (var i = 0; i < num_clients; i++) {\n    var entity = this.entities[i];\n    world_state.push({entity_id: entity.entity_id,\n                      position: entity.x,\n                      last_processed_input: this.last_processed_input[i]});\n  }\n\n  // Broadcast the state to all the clients.\n  for (var i = 0; i < num_clients; i++) {\n    var client = this.clients[i];\n    client.network.send(client.lag, world_state);\n  }\n}\n\n\n// =============================================================================\n//  Helpers.\n// =============================================================================\n\n// Render all the entities in the given canvas.\nvar renderWorld = function(canvas, entities) {\n  // Clear the canvas.\n  canvas.width = canvas.width;\n\n  var colours = [\"blue\", \"red\"];\n\n  for (var i in entities) {\n    var entity = entities[i];\n\n    // Compute size and position.\n    var radius = canvas.height*0.9/2;\n    var x = (entity.x / 10.0)*canvas.width;\n\n    // Draw the entity.\n    var ctx = canvas.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.arc(x, canvas.height / 2, radius, 0, 2*Math.PI, false);\n    ctx.fillStyle = colours[entity.entity_id];\n    ctx.fill();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"dark\" + colours[entity.entity_id];\n    ctx.stroke();\n  }\n}\n\n\nvar element = function(id) {\n  return document.getElementById(id);\n}\n\n// =============================================================================\n//  Get everything up and running.\n// =============================================================================\n\n// World update rate of the Server.\nvar server_fps = 4;\n\n\n// Update simulation parameters from UI.\nvar updateParameters = function() {\n  updatePlayerParameters(player1, \"player1\");\n  updatePlayerParameters(player2, \"player2\");\n  server.setUpdateRate(updateNumberFromUI(server.update_rate, \"server_fps\"));\n  return true;\n}\n\n\nvar updatePlayerParameters = function(client, prefix) {\n  client.lag = updateNumberFromUI(player1.lag, prefix + \"_lag\");\n\n  var cb_prediction = element(prefix + \"_prediction\");\n  var cb_reconciliation = element(prefix + \"_reconciliation\");\n\n  // Client Side Prediction disabled => disable Server Reconciliation.\n  if (client.client_side_prediction && !cb_prediction.checked) {\n    cb_reconciliation.checked = false;\n  }\n\n  // Server Reconciliation enabled => enable Client Side Prediction.\n  if (!client.server_reconciliation && cb_reconciliation.checked) {\n    cb_prediction.checked = true;\n  }\n\n  client.client_side_prediction = cb_prediction.checked;\n  client.server_reconciliation = cb_reconciliation.checked;\n\n  client.entity_interpolation = element(prefix + \"_interpolation\").checked;\n}\n\n\nvar updateNumberFromUI = function(old_value, element_id) {\n  var input = element(element_id);\n  var new_value = parseInt(input.value);\n  if (isNaN(new_value)) {\n    new_value = old_value;\n  }\n  input.value = new_value;\n  return new_value;\n}\n\n\n// When the player presses the arrow keys, set the corresponding flag in the client.\nvar keyHandler = function(e) {\n  e = e || window.event;\n  if (e.keyCode == 39) {\n    player1.key_right = (e.type == \"keydown\");\n  } else if (e.keyCode == 37) {\n    player1.key_left = (e.type == \"keydown\");\n  } else if (e.key == 'd') {\n    player2.key_right = (e.type == \"keydown\");\n  } else if (e.key == 'a') {\n    player2.key_left = (e.type == \"keydown\");\n  } else {\n    console.log(e)\n  }\n}\ndocument.body.onkeydown = keyHandler;\ndocument.body.onkeyup = keyHandler;\n\n\n// Setup a server, the player's client, and another player.\nvar server = new Server(element(\"server_canvas\"), element(\"server_status\"));\nvar player1 = new Client(element(\"player1_canvas\"), element(\"player1_status\"));\nvar player2 = new Client(element(\"player2_canvas\"), element(\"player2_status\"));\n\n\n// Connect the clients to the server.\nserver.connect(player1);\nserver.connect(player2);\n\n\n// Read initial parameters from the UI.\nupdateParameters();\n","var game = new Phaser.Game(320, 320, Phaser.AUTO, 'gameDiv', { preload: preload, create: create, update: update, render: render });\n\nfunction preload() {\n    // game.load.tilemap('map', 'assets/zombie_a5.csv', null, Phaser.Tilemap.CSV);\n\tgame.load.image('tiles', 'assets/tile.png');\n\tgame.load.tilemap('map', 'assets/test.csv', null, Phaser.Tilemap.CSV);\n\t// game.load.image('tiles', 'assets/zombie_a5.png');\n\tgame.load.spritesheet('h1', 'assets/h1.png', 32, 32);\n\tgame.load.spritesheet('h2', 'assets/h2.png', 32, 32);\n\n\tgame.load.atlas('zombies', 'assets/ZombieSheet.png', 'assets/ZombieSheet.json', Phaser.Loader.TEXTURE_ATLAS_JSON_HASH);\n}\n\nvar ZeWorld;\nvar player;\nvar layer;\nvar cursors;\nvar socket;\nvar entities = [];\nvar step = 32;\nvar speed = Math.ceil((1000/window.ServerTimeStep)/32)*32+50;\n\nvar gameProperties = {\n\t//this is the actual game size to determine the boundary of\n\t//the world\n\tgameWidth: 320,\n\tgameHeight: 320,\n\tgame_elemnt: \"gameDiv\",\n\tin_game: false,\n\tpseudo: \"\",\n};\n\n///// EVENTS ////\nfunction onsocketConnected () {\n\tpassphrase = findGetParameter(\"key\")\n\tsocket.logon(passphrase);\n}\n\nfunction onuserlogged(pseudo) {\n\t//create a main player object for the connected user to control\n\tgameProperties.in_game = true;\n\tgameProperties.pseudo = pseudo;\n\n\tplayer = new User(\"P\", pseudo, 'h1', 32, 32);\n\t// entities.push(new_player);\n\tsocket.bcast({type: \"P\", id: gameProperties.pseudo, face: \"h1\", x: 32, y: 32});\n}\n\nfunction onRemovePlayer (data) {\n\tvar removePlayer = findplayerbyid(data.id);\n\t// Player not found\n\tif (!removePlayer) {\n\t\tconsole.log('Player not found: ', data.id)\n\t\treturn;\n\t}\n\n\tremovePlayer.player.destroy();\n\tentities.splice(entities.indexOf(removePlayer), 1);\n}\n\nfunction onNewPlayer (data) {\n\tconsole.log(data);\n\tif (data.id == gameProperties.pseudo)\n\t\treturn\n\tvar movePlayer = findplayerbyid (data.id);\n\tif (findplayerbyid (data.id)) return\n\telse {\n\t\tif (data.type == \"P\")\n\t\t\tvar new_enemy = new User(data.type, data.id, data.face, data.x, data.y);\n\t\telse\n\t\t\tvar new_enemy = new Mob(data.type, data.id, data.face, data.x, data.y);\n\t\tentities.push(new_enemy);\n\t}\n}\n\nfunction onEnemyMove (data) {\n\tif (data.id == gameProperties.pseudo) {\n\t\treturn\n\t}\n\n\tvar movePlayer = findplayerbyid (data.id);\n\tif (!movePlayer) {\n\t\tonNewPlayer(data)\n\t\treturn;\n\t}\n\tmovePlayer.sprite.newMove = data\n\n\tmovePlayer.sprite.dest_x = data.x;\n\tmovePlayer.sprite.dest_y = data.y;\n\tmovePlayer.sprite.needUpdate = true;\n}\n\n/////////////////////////\n\nfunction findplayerbyid (id) {\n\tfor (var i = 0; i < entities.length; i++) {\n\t\tif (entities[i].sprite.User_id == id) {\n\t\t\treturn entities[i];\n\t\t}\n\t}\n\treturn false\n}\n\nfunction create() {\n\tgame.physics.startSystem(Phaser.Physics.ARCADE);\n\tcursors = game.input.keyboard.createCursorKeys();\n\n\tzeWorld = game.add.tilemap('map', 32, 32);\n    zeWorld.addTilesetImage('tiles');\n    layer = zeWorld.createLayer(0);\n\tgame.physics.arcade.enable(layer);\n    layer.resizeWorld();\n\tzeWorld.setCollisionBetween(45, 100);\n\tlayer.debug = true;\n\n\tsocket = new Connection(window.Server, onsocketConnected);\n\tsocket.on(\"userlogged\", onuserlogged);\n\tsocket.on(\"new_enemyPlayer\", onNewPlayer);\n\tsocket.on(\"enemy_move\", onEnemyMove);\n\tsocket.on('remove_player', onRemovePlayer);\n}\n\nfunction updatePlayer() {\n\tgame.physics.arcade.collide(player, layer, player.moveUserOver);\n\n\tif (!player.isMoving()) {\n\t\tif (cursors.left.isDown)\n\t\t{\n\t\t\tplayer.moveLeft(step, speed)\n\t\t}\n\t\telse if (cursors.right.isDown)\n\t\t{\n\t\t\tplayer.moveRight(step, speed)\n\t\t}\n\t\telse if (cursors.up.isDown)\n\t\t{\n\t\t\tplayer.moveUp(step, speed)\n\t\t}\n\t\telse if (cursors.down.isDown)\n\t\t{\n\t\t\tplayer.moveDown(step, speed)\n\t\t}\n\t}\n}\n\nfunction updateRemotePlayers() {\n\tfor (var i = 0; i < entities.length; i++) {\n\t\tif (entities[i].needUpdate() && !entities[i].isMoving()) {\n\t\t\tentities[i].sprite.PlayerIsMoving = true\n\t\t\tentities[i].sprite.needUpdate = false\n\t\t\tif (entities[i].sprite.newMove.move == \"left\") {\n\t\t\t\tplayer.moveLeft(step, speed)\n\t\t\t}\n\t\t\telse if (entities[i].sprite.newMove.move == \"right\") {\n\t\t\t\tplayer.moveRight(step, speed)\n\t\t\t}\n\t\t\telse if (entities[i].sprite.newMove.move == \"up\") {\n\t\t\t\tplayer.moveUp(step, speed)\n\t\t\t}\n\t\t\telse if (entities[i].sprite.newMove.move == \"down\") {\n\t\t\t\tplayer.moveDown(step, speed)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction update() {\n\tif (gameProperties.in_game) {\n\t\tupdatePlayer()\n\t}\n\tupdateRemotePlayers()\n}\n\nfunction render() {\n}\n","\"use strict\";\n\nvar CharacterSpr = require('gameSprites/CharacterSpr');\n\nvar CharacterObj = function(game, x, y, isMainPlayer) {\n    this.configure(game, isMainPlayer);\n    this.setupSprite(x, y);\n    this.resetCurrentPosition();\n};\n\nCharacterObj.prototype.configure = function(game, isMainPlayer){\n    this.game = game;\n    this.isMainPlayer = isMainPlayer;\n\n};\n\nCharacterObj.prototype.setupSprite = function(x, y){\n    this.sprite = new CharacterSpr(this.game, x, y, this.isMainPlayer);\n    this.game.add.existing(this.sprite);\n};\n\nCharacterObj.prototype.resetCurrentPosition  = function(){\n    this.moving = false;\n    this.sprite.stopAnimation();\n};\n\nCharacterObj.prototype.manageMouvement = function(){\n  this.cursors = this.game.input.keyboard.createCursorKeys();\n\nif (!this.sprite.isMoving()) {\n    if (this.cursors.left.isDown)\n    {\n        this.sprite.walkLeft();\n    }\n    else if (this.cursors.right.isDown)\n    {\n        this.sprite.walkRight();\n    }\n    else if (this.cursors.up.isDown)\n  {\n\n    this.sprite.walkUp();\n  }\n  else if (this.cursors.down.isDown)\n  {\n\n    this.sprite.walkDown();\n  }\n    else\n    {\n        //  Stand still\n        this.resetCurrentPosition();\n    }\n}\n}\n\nmodule.exports = CharacterObj;\n","\"use strict\";\n\nvar Config = require('config');\n\nvar CharacterSpr = function(game, dest_x, dest_y) {\n  this.face = 'h1';\n\n  this.isPlayer = true\n  this.PlayerOrdersCount = 0\n\n  this.step = 32;\n  this.speed = Math.ceil((1000/Config.ServerTimeStep)/32)*32+50;\n\n\n\n\n  Phaser.Sprite.call(this, game, dest_x, dest_y, this.face);\n  this.enableCollision();\n  this.setupAnimations();\n};\n\nCharacterSpr.prototype = Object.create(Phaser.Sprite.prototype);\nCharacterSpr.prototype.constructor = CharacterSpr;\n\nCharacterSpr.prototype.enableCollision = function() {\n    this.game.physics.arcade.enable(this);\n    this.body.collideWorldBounds = true;\n};\n\nCharacterSpr.prototype.adjustSpritePosition = function() {\n  var markerx = this.game.math.snapToFloor(Math.ceil(this.dest_x), 32)\n  var markery = this.game.math.snapToFloor(Math.ceil(this.dest_y), 32)\n  // console.log(\"Adjusting : x=\"+this.sprite.body.x+\" y=\"+this.sprite.body.y+\" -> x=\"+ markerx +\" y=\"+markery)\n  this.body.x = markerx\n  this.body.y = markery\n\n  this.PlayerIsMoving = false\n  // this.graphics.clear();\n}\n\nCharacterSpr.prototype.setupAnimations = function() {\n    //this.anchor.setTo(0.5, 0.5);\n\n    this.User_id = this.game.mainPlayerName;\n\t\tthis.needUpdate = false;\n\t\tthis.newMove = null;\n\n    this.body.setSize(32, 32);\n    this.PlayerIsMoving = false\n\n    this.animations.add('left', [3, 4, 5], 10, true);\n\t  this.animations.add('right', [6, 7, 8], 10, true);\n\t  this.animations.add('up', [9, 10, 11], 10, true);\n\t  this.animations.add('down', [0, 1, 2], 10, true);\n\n    this.line = new Phaser.Line(0, 0, 100, 100);\n\t  this.graphics=this.game.add.graphics(0,0);\n    this.graphics.lineStyle(2, 0xffd900, 1);\n\n    this.body.onMoveComplete.add(this.adjustSpritePosition, this);\n\n};\n\nCharacterSpr.prototype.sendMoveToServer = function(move) {\n\n    this.PlayerOrdersCount += 1;\n    // console.log(\"Sending: \"+player.sprite.dest_x+\"  \"+player.sprite.dest_y)\n    this.graphics.moveTo(this.body.x + 16, this.body.y + 16);//moving position of graphic if you draw mulitple lines\n      this.graphics.lineTo(this.dest_x + 16, this.dest_y + 16);\n      this.graphics.endFill();\n\n    this.game.socket.bcast({type: \"P\", id: this.User_id, face: this.face, num: this.PlayerOrdersCount, move: move, speed: 1, x: this.dest_x, y: this.dest_y })\n\n\n  this.graphics.moveTo(this.body.x + 16, this.body.y + 16);//moving position of graphic if you draw mulitple lines\n  this.graphics.lineTo(this.dest_x + 16, this.dest_y + 16);\n  this.graphics.endFill();\n\n  this.PlayerIsMoving = true;\n};\n\nCharacterSpr.prototype.walkLeft = function(){\n    this.dest_x = this.body.x - this.step\n    this.dest_y = this.body.y\n\n    this.sendMoveToServer('left')\n    this.body.moveTo(this.speed, this.step, 180);\n    this.animations.play('left');\n};\n\nCharacterSpr.prototype.walkRight = function(){\n    this.dest_x = this.body.x + this.step\n    this.dest_y = this.body.y\n\n    this.sendMoveToServer('right')\n    this.body.moveTo(this.speed, this.step, 0);\n    this.animations.play('right');\n};\n\nCharacterSpr.prototype.walkUp = function(){\n  this.dest_x = this.body.x\n  this.dest_y = this.body.y - this.step\n\n  this.sendMoveToServer('up')\n  this.body.moveTo(this.speed, this.step, 270);\n  this.animations.play('up');\n};\n\nCharacterSpr.prototype.walkDown = function(){\n  this.dest_x = this.body.x\n  this.dest_y = this.body.y + this.step\n\n  this.sendMoveToServer('down')\n  this.body.moveTo(this.speed, this.step, 90);\n  this.animations.play('down');\n};\n\nCharacterSpr.prototype.stopAnimation = function(){\n    this.animations.stop();\n    this.PlayerIsMoving = false\n    this.frame = 1;\n};\n\nCharacterSpr.prototype.isMoving = function(){\n    return this.PlayerIsMoving\n};\n\nmodule.exports = CharacterSpr;\n","\"use strict\";\n\nvar gameBootstrapper = {\n    init: function(gameContainerElementId){\n\n        var game = new Phaser.Game(800, 480, Phaser.AUTO, gameContainerElementId);\n\n        game.state.add('boot', require('./states/boot'));\n        game.state.add('login', require('./states/login'));\n        game.state.add('play', require('./states/play'));\n\n        game.state.start('boot');\n    }\n};\n\nmodule.exports = gameBootstrapper;\n","\nvar socket;\n\n//this is just configuring a screen size to fit the game properly\n//to the browser\ncanvas_width = window.innerWidth * window.devicePixelRatio;\ncanvas_height = window.innerHeight * window.devicePixelRatio;\n\n//make a phaser game\ngame = new Phaser.Game(canvas_width, canvas_height, Phaser.CANVAS, 'gameDiv');\n\nvar enemies = [];\n\nvar gameProperties = {\n\t//this is the actual game size to determine the boundary of\n\t//the world\n\tgameWidth: 640,\n\tgameHeight: 480,\n\tgame_elemnt: \"gameDiv\",\n\tin_game: false,\n};\n\n// this is the main game state\nvar main = function(game){\n};\n\n//call this function when the player connects to the server.\nfunction onsocketConnected () {\n\tgamediv = document.getElementById(gameProperties.game_elemnt)\n\tlogin = gamediv.getAttribute(\"pseudo\");\n\tpass = gamediv.getAttribute(\"pass\");\n\t// send to the server a \"new_player\" message so that the server knows\n\t// a new player object has been created\n\tgameProperties.pseudo = login;\n\tsocket.logon(login, pass);\n}\n\nfunction onuserlogged() {\n\t//create a main player object for the connected user to control\n\tcreatePlayer();\n\tgameProperties.in_game = true;\n\tsocket.newPlayer({id: gameProperties.pseudo, x: player.x, y: player.y, angle: player.angle})\n}\n\nfunction onRemovePlayer (data) {\n\tvar removePlayer = findplayerbyid(data.id);\n\t// Player not found\n\tif (!removePlayer) {\n\t\tconsole.log('Player not found: ', data.id)\n\t\treturn;\n\t}\n\n\tremovePlayer.player.destroy();\n\tenemies.splice(enemies.indexOf(removePlayer), 1);\n}\n\nfunction createPlayer () {\n\t//uses Phaser’s graphics to draw a circle\n\tplayer = game.add.graphics(0, 0);\n\tplayer.radius = 100;\n\n\t// set a fill and line style\n\tplayer.beginFill(0xffd900);\n\tplayer.lineStyle(2, 0xffd900, 1);\n\tplayer.drawCircle(0, 0, player.radius * 2);\n\tplayer.endFill();\n\tplayer.anchor.setTo(0.5,0.5);\n\tplayer.body_size = player.radius;\n\n\t// draw a shape\n\tgame.physics.p2.enableBody(player, true);\n\tplayer.body.clearShapes();\n\tplayer.body.addCircle(player.body_size, 0 , 0);\n\tplayer.body.data.shapes[0].sensor = true;\n}\n\n// this is the enemy class.\nvar remote_player = function (id, startx, starty, start_angle) {\n\tthis.x = startx;\n\tthis.y = starty;\n\t//this is the unique socket id. We use it as a unique name for enemy\n\tthis.id = id;\n\tthis.angle = start_angle;\n\n\tthis.player = game.add.graphics(this.x , this.y);\n\tthis.player.radius = 100;\n\n\t// set a fill and line style\n\tthis.player.beginFill(0xffd900);\n\tthis.player.lineStyle(2, 0xffd900, 1);\n\tthis.player.drawCircle(0, 0, this.player.radius * 2);\n\tthis.player.endFill();\n\tthis.player.anchor.setTo(0.5,0.5);\n\tthis.player.body_size = this.player.radius;\n\n\t// draw a shape\n\tgame.physics.p2.enableBody(this.player, true);\n\tthis.player.body.clearShapes();\n\tthis.player.body.addCircle(this.player.body_size, 0 , 0);\n\tthis.player.body.data.shapes[0].sensor = true;\n}\n\nfunction onNewPlayer (data) {\n\tconsole.log(data);\n\t//enemy object\n\tvar new_enemy = new remote_player(data.id, data.x, data.y, data.angle);\n\tenemies.push(new_enemy);\n}\n\nfunction onEnemyMove (data) {\n\t// console.log(data.id);\n\t// console.log(enemies);\n\tvar movePlayer = findplayerbyid (data.id);\n\n\tif (!movePlayer) {\n\t\tconsole.log(\"player not found\")\n\t\treturn;\n\t}\n\tmovePlayer.player.body.x = data.x;\n\tmovePlayer.player.body.y = data.y;\n\tmovePlayer.player.angle = data.angle;\n}\n\nfunction findplayerbyid (id) {\n\tfor (var i = 0; i < enemies.length; i++) {\n\t\tif (enemies[i].id == id) {\n\t\t\treturn enemies[i];\n\t\t}\n\t}\n}\n\n// add the\nmain.prototype = {\n\tpreload: function() {\n\t\tgame.plugins.add(new GridPhysics(this.game));\n\t\tgame.physics.gridPhysics.gridSize.set(8);\n\t\t// game.scale.scaleMode = Phaser.ScaleManager.RESIZE;\n\t\t// game.world.setBounds(0, 0, gameProperties.gameWidth,\n\t\t// gameProperties.gameHeight, false, false, false, false);\n\t\t// //I’m using P2JS for physics system. You can choose others if you want\n\t\t// game.physics.startSystem(Phaser.Physics.P2JS);\n\t\t// game.physics.p2.setBoundsToWorld(false, false, false, false, false)\n\t\t// //sets the y gravity to 0. This means players won’t fall down by gravity\n\t\t// game.physics.p2.gravity.y = 0;\n\t\t// // turn gravity off\n\t\t// game.physics.p2.applyGravity = false;\n\t\t// game.physics.p2.enableBody(game.physics.p2.walls, false);\n\t\t// // turn on collision detection\n\t\t// game.physics.p2.setImpactEvents(true);\n\n    },\n\t//this function is fired once when we load the game\n\tcreate: function () {\n\t\tgame.stage.backgroundColor = 0xE1A193;;\n\t\tconsole.log(\"client started\");\n\t\t//listen if a client successfully makes a connection to the server,\n\t\t//and call onsocketConnected\n\t\tsocket = new Connection(\"10.31.200.78:8080\", onsocketConnected);\n\t\tsocket.on(\"userlogged\", onuserlogged);\n\n\t\tsocket.on(\"new_enemyPlayer\", onNewPlayer);\n\t\t//listen to enemy movement\n\t\tsocket.on(\"enemy_move\", onEnemyMove);\n\n\t\t// when received remove_player, remove the player passed;\n\t\tsocket.on('remove_player', onRemovePlayer);\n\t},\n\n\tupdate: function () {\n\t\t// emit the player input\n\n\t\t//move the player when he is in game\n\t\tif (gameProperties.in_game) {\n\t\t\t// we're using phaser's mouse pointer to keep track of\n\t\t\t// user's mouse position\n\t\t\t// var pointer = game.input.mousePointer;\n\t\t\t//\n\t\t\t// // distanceToPointer allows us to measure the distance between the\n\t\t\t// // mouse pointer and the player object\n\t\t\t// if (distanceToPointer(player, pointer) <= 50) {\n\t\t\t// \t//The player can move to mouse pointer at a certain speed.\n\t\t\t// \t//look at player.js on how this is implemented.\n\t\t\t// \tmovetoPointer(player, 0, pointer, 100);\n\t\t\t// } else {\n\t\t\t// \tmovetoPointer(player, 500, pointer);\n\t\t\t// }\n\t\t\t// console.log(player)\n\t\t\tsocket.bcast({id: gameProperties.pseudo, x: player.x, y: player.y, angle: player.angle})\n\t\t}\n\t}\n}\n\n// wrap the game states.\nvar gameBootstrapper = {\n    init: function(gameContainerElementId){\n\t\tgame.state.add('main', main);\n\t\tgame.state.start('main');\n    }\n};;\n\n//call the init function in the wrapper and specifiy the division id\ngameBootstrapper.init(\"gameDiv\");\n","var Mob = function (type, id, face, startx, starty) {\n\tthis.sprite = game.add.sprite(startx , starty, \"zombies\");\n\n\t//this is the unique socket id. We use it as a unique name for enemy\n\tthis.sprite.User_id = id;\n\tthis.sprite.needUpdate = false;\n\tthis.sprite.newMove = null;\n\tthis.sprite.face = face\n\n    this.sprite.dest_x = startx\n    this.sprite.dest_y = starty\n\tgame.physics.arcade.enable(this.sprite);\n    this.sprite.body.collideWorldBounds = true;\n\tthis.sprite.body.setSize(32, 32);\n\n\tthis.sprite.animations.add('left', [3, 4, 5], 10, true);\n    this.sprite.animations.add('right', [6, 7, 8], 10, true);\n    this.sprite.animations.add('up', [9, 10, 11], 10, true);\n    this.sprite.animations.add('down', [0, 1, 2], 10, true);\n\n\tthis.sprite.PlayerIsMoving = false\n\tthis.sprite.body.onMoveComplete.add(this.moveMobOver, this);\n}\n\nUser.prototype.adjustSpritePosition = function() {\n\tmarkerx = game.math.snapToFloor(Math.ceil(this.sprite.dest_x), 32)\n\tmarkery = game.math.snapToFloor(Math.ceil(this.sprite.dest_y), 32)\n\tconsole.log(\"Adjusting : x=\"+this.sprite.x+\" y=\"+this.sprite.y+\" -> x=\"+ markerx +\" y=\"+markery)\n\tthis.sprite.body.x = markerx\n\tthis.sprite.body.y = markery\n}\n\nUser.prototype.moveMobOver = function() {\n\tthis.adjustSpritePosition()\n\tthis.sprite.PlayerIsMoving = false\n\tthis.sprite.animations.stop();\n\tthis.sprite.frame = 1;\n}\n","'use strict';\n\nvar CollectableObj = require('client/gameObjects/CollectableObj');\nvar scoreBoard = require('client/utils/ScoreBoard');\n\nvar serverSocket, concernedPhaserState;\nvar collectableObjects = [];\n\nfunction synchronize(socket, phaserState){\n    serverSocket = socket;\n    concernedPhaserState = phaserState;\n\n    // configure incoming traffic\n    serverSocket.on('SERVER_PLAYER_ID', onReadyToRequestCollectables);\n    serverSocket.on('SERVER_ALL_COLLECTABLES', onReceiveAllCollectables);\n    serverSocket.on('SERVER_COLLECTABLE_DESTROY', onDestroyCollectable);\n    serverSocket.on('SERVER_UPDATE_PLAYER_SCORES', onReceiveScores);\n\n    // initialize score board\n    scoreBoard.init();\n}\n\nfunction onReadyToRequestCollectables(){\n    serverSocket.emit('CLIENT_GET_ALL_COLLECTABLES');\n}\n\nfunction onDestroyCollectable(newCollectableInfo){\n    var collectableIdToDestroy = newCollectableInfo.uid;\n\n    var collectableToDestroy = collectableObjects.filter(function(collectable){\n        return (collectable.uid === collectableIdToDestroy);\n    })[0];\n\n\n    if(collectableToDestroy !== undefined){\n        collectableToDestroy.destroy();\n    }\n}\n\nfunction onReceiveScores(playersList){\n    scoreBoard.setScores(playersList);\n}\n\nfunction tryToCollectForPlayer(collectable, player){\n    serverSocket.emit('CLIENT_TRY_TO_COLLECT', { collectableId: collectable.uid, playerId: player.uid});\n}\n\n\n\nfunction onReceiveAllCollectables(collectableList) {\n    destroyAllCollectables();\n\n    collectableList.forEach(function(collectable){\n\n        if(collectable.isAvailable){\n            var colObj = new CollectableObj({\n                game : concernedPhaserState.game,\n                x: collectable.x,\n                y: collectable.y,\n                isAvailable: collectable.isAvailable,\n                type: collectable.type,\n                uid: collectable.uid\n            });\n        }\n        collectableObjects.push(colObj);\n    });\n}\n\nfunction destroyAllCollectables(){\n    collectableObjects.forEach(function(colObject){\n        if(colObject){\n            colObject.destroy();\n        }\n    });\n    collectableObjects = [];\n}\n\nfunction setConcernedPhaserState(state){\n    concernedPhaserState = state;\n}\n\nmodule.exports = {\n    synchronize : synchronize,\n    tryToCollectForPlayer: tryToCollectForPlayer\n};","'use strict';\n\nfunction NetworkManager() {\n\n}\n\nNetworkManager.prototype.openConnection = function() {\n    this.ws = new WebSocket('ws://localhost:8080/ws');\n    this.connected = false;\n    this.ws.onmessage = this.onMessage.bind(this);\n    this.ws.onerror = this.displayError.bind(this);\n    this.ws.onopen = this.connectionOpen.bind(this);\n};\n\nNetworkManager.prototype.connectionOpen = function() {\n    this.connected = true;\n    this.ws.send(\"[HELO]\" + key);\n};\n\nNetworkManager.prototype.bcast = function(message) {\n console.log(message);\n this.ws.send(\"[BCST]\" + JSON.stringify(message))\n}\n\nNetworkManager.prototype.onMessage = function(message) {\n    myText.text = myText.text + message.data;\n    var msg = JSON.parse(message.data);\n    sprite.x = msg.x;\n    sprite.y = msg.y;\n};\n\nNetworkManager.prototype.displayError = function(err) {\n    console.log('Websocketerror: ' + err);\n};\n\n\nmodule.exports = NetworkManager;\n","var User = function (type, id, face, startx, starty) {\n\tthis.sprite = game.add.sprite(startx , starty, face);\n\n\t//this is the unique socket id. We use it as a unique name for enemy\n\tthis.sprite.User_id = id;\n\tif (type == \"P\") this.sprite.isPlayer = true\n\telse this.sprite.isPlayer = false\n\tthis.sprite.needUpdate = false;\n\tthis.sprite.newMove = null;\n\tthis.sprite.face = face\n\tthis.sprite.PlayerOrdersCount = 0\n\n    this.sprite.dest_x = startx\n    this.sprite.dest_y = starty\n\tgame.physics.arcade.enable(this.sprite);\n    this.sprite.body.collideWorldBounds = true;\n\tthis.sprite.body.setSize(32, 32);\n\n\tthis.sprite.animations.add('left', [3, 4, 5], 10, true);\n    this.sprite.animations.add('right', [6, 7, 8], 10, true);\n    this.sprite.animations.add('up', [9, 10, 11], 10, true);\n    this.sprite.animations.add('down', [0, 1, 2], 10, true);\n\n\tthis.sprite.PlayerIsMoving = false\n\tthis.sprite.body.onMoveComplete.add(this.moveUserOver, this);\n}\n\nUser.prototype.sendMoveToServer = function(move) {\n\tif (this.sprite.isPlayer) {\n\t\tthis.sprite.PlayerOrdersCount += 1;\n\t\tsocket.bcast({type: \"P\", id: this.sprite.User_id, face: this.sprite.face, num: this.sprite.PlayerOrdersCount, move: move, x: player.sprite.dest_x, y: player.sprite.dest_y })\n\t}\n\tthis.sprite.PlayerIsMoving = true\n}\n\nUser.prototype.adjustSpritePosition = function() {\n\tmarkerx = game.math.snapToFloor(Math.ceil(this.sprite.dest_x), 32)\n\tmarkery = game.math.snapToFloor(Math.ceil(this.sprite.dest_y), 32)\n\tconsole.log(\"Adjusting : x=\"+this.sprite.x+\" y=\"+this.sprite.y+\" -> x=\"+ markerx +\" y=\"+markery)\n\tthis.sprite.body.x = markerx\n\tthis.sprite.body.y = markery\n}\n\nUser.prototype.moveUserOver = function() {\n\tthis.adjustSpritePosition()\n\tthis.sprite.PlayerIsMoving = false\n\tthis.sprite.animations.stop();\n\tthis.sprite.frame = 1;\n}\n\nUser.prototype.isMoving = function() {\n\treturn this.sprite.PlayerIsMoving\n}\n\nUser.prototype.needUpdate = function() {\n\treturn this.sprite.needUpdate\n}\n\nUser.prototype.moveLeft = function(step, speed) {\n\tthis.sprite.dest_x = this.sprite.body.x - step\n\tthis.sprite.dest_y = this.sprite.body.y\n\n\tthis.sendMoveToServer('left')\n\tthis.sprite.body.moveTo(speed, step, 180);\n\tthis.sprite.animations.play('left');\n}\n\nUser.prototype.moveRight = function(step, speed) {\n\tthis.sprite.dest_x = this.sprite.body.x + step\n\tthis.sprite.dest_y = this.sprite.body.y\n\n\tthis.sendMoveToServer('right')\n\tthis.sprite.body.moveTo(speed, step, 0);\n\tthis.sprite.animations.play('right');\n}\n\nUser.prototype.moveUp = function(step, speed) {\n\tthis.sprite.dest_x = this.sprite.body.x\n\tthis.sprite.dest_y = this.sprite.body.y - step\n\n\tthis.sendMoveToServer('up')\n\tthis.sprite.body.moveTo(speed, step, 270);\n\tthis.sprite.animations.play('up');\n}\n\nUser.prototype.moveDown = function(step, speed) {\n\tthis.sprite.dest_x = this.sprite.body.x\n\tthis.sprite.dest_y = this.sprite.body.y + step\n\n\tthis.sendMoveToServer('down')\n\tthis.sprite.body.moveTo(speed, step, 90);\n\tthis.sprite.animations.play('down');\n}\n","'use strict';\n\nfunction Boot(){}\n\nBoot.prototype = {\n    preload: function(){\n        this.game.stage.disableVisibilityChange = true;\n        this.game.stage.backgroundColor = 0x3b0760;\n        this.load.onLoadComplete.addOnce(this.onLoadComplete, this);\n\n        this.showLoadingText();\n        this.loadAssets();\n    },\n\n    onLoadComplete: function(){\n        this.game.state.start('login');\n    },\n\n    loadAssets: function(){\n      this.game.load.image('tiles', 'gameAssets/tile.png');\n      this.game.load.tilemap('map', 'gameAssets/test.csv', null, Phaser.Tilemap.CSV);\n      // game.load.image('tiles', 'assets/zombie_a5.png');\n      this.game.load.spritesheet('h1', 'gameAssets/h1.png', 32, 32);\n      this.game.load.spritesheet('h2', 'gameAssets/h2.png', 32, 32);\n    },\n\n    showLoadingText: function(){\n        var loadingText = \"- Loading -\";\n        var text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, loadingText);\n        //  Centers the text\n        text.anchor.set(0.5);\n        text.align = 'center';\n\n        //  Our font + size\n        text.font = 'Arial';\n        text.fontWeight = 'bold';\n        text.fontSize = 70;\n        text.fill = '#ffffff';\n    }\n};\n\nmodule.exports = Boot;\n","'use strict';\n\n\nvar DomHelper = require('utils/DomHelper');\n\nvar nickNameInput;\nvar domToRemove = [];\n\nfunction Login(){}\n\n\nLogin.prototype = {\n\n    create: function(){\n        this.game.stage.backgroundColor = 0x66990D;\n\n        DomHelper.init(this.game);\n        domToRemove = [];\n        this.showLoginPanel();\n    },\n    showLoginPanel: function(){\n        var me = this;\n        var panel = DomHelper.mediumPanel(180, 120, 'game-login-panel');\n        var form = DomHelper.form(saveName);\n        var blockInput = DomHelper.inputBlock();\n\n        nickNameInput = DomHelper.inputWithLabel(blockInput, 'Enter a nickname', 200, 200);\n\n        var saveButton = DomHelper.createButton('GO !!', 'game-login-button');\n\n        form.appendChild(blockInput);\n        form.appendChild(saveButton);\n        panel.appendChild(form);\n\n        domToRemove.push(panel); // removing the panel will remove all its childs\n\n        function saveName(){\n            me.game.mainPlayerName = nickNameInput.value;\n            me.game.keyCrypt = Encrypt_b64(me.game.mainPlayerName+'|toto'+'|USER');\n\n            if(me.game.mainPlayerName){\n                me.cleanDom();\n                me.game.state.start('play');\n             }\n             nickNameInput.value = '';\n        }\n    },\n\n    cleanDom: function(){\n        for(var i = 0, max = domToRemove.length; i < max; i++){\n            domToRemove[i].remove();\n        }\n    }\n};\n\nmodule.exports = Login;\n","'use strict';\n\nvar Connection = require('wsconnect');\nvar Config = require('config');\nvar NetworkManager = require('network/NetworkManager');\n\nvar CharacterObj = require('gameObjects/CharacterObj');\n\n\nfunction Play(){}\n\nPlay.prototype = {\n    preload: function(){\n        this.game.load.image('tiles', 'gameAssets/tile.png');\n    \tthis.game.load.tilemap('map', 'gameAssets/test.csv', null, Phaser.Tilemap.CSV);\n    \t// game.load.image('tiles', 'assets/zombie_a5.png');\n    \tthis.game.load.spritesheet('h1', 'gameAssets/h1.png', 32, 32);\n    \tthis.game.load.spritesheet('h2', 'gameAssets/h2.png', 32, 32);\n\n    \tthis.game.load.atlas('zombies', 'gameAssets/ZombieSheet.png', 'gameAssets/ZombieSheet.json', Phaser.Loader.TEXTURE_ATLAS_JSON_HASH);\n    },\n    initSocket: function(){\n        this.game.socket = new Connection(Config.ServerHost, this.game.keyCrypt);\n\n       \tthis.game.socket.on(\"userlogged\", this.addMainPlayer());\n\n\n     //  \tthis.socket.on(\"new_enemyPlayer\", onNewPlayer);\n     //  \tthis.socket.on(\"enemy_move\", onEnemyMove);\n     //  \tthis.socket.on('remove_player', onRemovePlayer);\n    },\n    initMap: function(){\n        this.zeWorld = this.game.add.tilemap('map', 32, 32);\n        this.zeWorld.addTilesetImage('tiles');\n        this.layer = this.zeWorld.createLayer(0);\n        this.game.physics.arcade.enable(this.layer);\n        this.layer.resizeWorld();\n        this.zeWorld.setCollisionBetween(45, 100);\n        this.layer.debug = true;\n    },\n    addMainPlayer: function(){\n\n        \t//create a main player object for the connected user to control\n        \t//gameProperties.in_game = true;\n        \t//gameProperties.pseudo = pseudo;\n            console.log('addMAINPKLAYER',this.game.socket);\n        \t//player = new User(\"P\", pseudo, 'h1', 32, 32);\n        \tthis.player = new CharacterObj(this.game, 32, 32);\n        \t// entities.push(new_player);\n        \tthis.serverSocket.bcast({type: \"P\", id: this.game.mainPlayerName, face: \"h1\", x: 32, y: 32});\n\n    },\n    create: function(){\n\n      this.game.physics.startSystem(Phaser.Physics.ARCADE);\n      this.cursors = this.game.input.keyboard.createCursorKeys();\n\n\n      this.initMap();\n     // this.initSocket();\n      this.connectToServer();\n      this.addMainPlayer();\n\n    },\n\n    update: function(){\n        this.player.manageMouvement();\n    },\n\n\n    connectToServer: function(){\n\n        this.serverSocket = new NetworkManager(this.game.keyCrypt);\n/*\n        NetworkManager.onOtherPlayerConnected(function(otherPlayerInfo){\n            ChatManager.systemMessage('info', otherPlayerInfo.nickname + ' is connected');\n            me.addOtherPlayer(otherPlayerInfo);\n        });\n\n        // set what to do when the current player receive movement information about another player\n        NetworkManager.onOtherPlayerMove(function(movementInfo){\n            var otherPlayerToMove = searchById(me.otherPlayers, movementInfo.uid);\n            if(otherPlayerToMove){\n                otherPlayerToMove.moveTo(movementInfo.x, movementInfo.y);\n            }\n        });\n\n        // set what to do when the client receive the players list from the server\n        NetworkManager.onUpdatePlayerList(function(receivedList){\n            me.removeDisconnected(receivedList);\n            me.addConnected(receivedList);\n\n        });\n        this.otherPlayers = [];\n\n        this.synchronizeMapData(serverSocket);*/\n    }\n\n\n\n};\n\nmodule.exports = Play;\n","\nvar game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example', { preload: preload, create: create, update:update, render:render  });\n\nvar sprite ;\nvar counter = 0 ;\nvar step = Math.PI * 2 / 360 ;\n\n\nfunction preload() {\n\n    // Load images to use as the game sprites\n    game.load.image('sprite', 'assets/sprites/phaser2.png');\n\n}\n\nfunction create() {\n\n    // Create sprite and put it in the middle of the stage\n    sprite = game.add.sprite(0, 0, 'sprite');\n    sprite.alpha = 0.5 ;\n    sprite.x = game.width / 2 ;\n    sprite.anchor.x = sprite.anchor.y = 0.5 ;\n}\n\nfunction update()\n{\n    // Move sprite up and down smoothly for show\n    var tStep = Math.sin( counter ) ;\n    sprite.y = (game.height/2) + tStep * 30 ;\n    sprite.rotation += Phaser.Math.degToRad( 0.1 * tStep ) ;\n    counter += step ;\n}\n\nfunction render() {\n\n    // Sprite debug info\n    game.debug.spriteInfo(sprite, 32, 32);\n\n}\n","'use strict';\n\nvar NetworkManager = require('client/network/NetworkManager');\n\nvar chatInput, messagesBox;\nvar mainPlayerName;\n\nfunction init(containerId){\n    initGuiElements(containerId);\n    appendSystemMessage('info', 'Welcome ' + mainPlayerName + ' to this Demo');\n}\n\n/*\n Create the html structure that correspond to this :\n\n <div id=\"game-chat-box\">\n     <div class=\"game-chat-messages\">\n        Messages goes here\n     </div>\n     <form>\n        <input type=\"text\" class=\"game-chat-input\">\n     </form>\n </div>\n */\nfunction initGuiElements(containerId){\n    var container = document.getElementById(containerId);\n\n    var chatBox = document.createElement('div');\n    chatBox.id = 'game-chat-box';\n\n    messagesBox = document.createElement('div');\n    messagesBox.className = 'game-chat-messages';\n\n    var chatForm = document.createElement('form');\n\n    chatForm.onsubmit= onSendMessage;\n\n    chatInput = document.createElement('input');\n    chatInput.type = 'text';\n    chatInput.className = 'game-chat-input';\n\n    chatForm.appendChild(chatInput);\n\n    chatBox.appendChild(messagesBox);\n    chatBox.appendChild(chatForm);\n\n    container.appendChild(chatBox);\n}\n\nfunction onSendMessage(){\n    var textMessage = escapeHtml(chatInput.value);\n\n    NetworkManager.sendChatMessage(textMessage);\n\n    appendMessage(mainPlayerName, textMessage);\n\n    chatInput.value = '';\n\n    return false;\n}\n\nfunction appendSystemMessage(type, message){\n    appendMessage('*', message, type);\n}\n\nfunction appendMessage(author, message, messageType){\n    var cssTypeSuffix = '';\n    if(messageType !== undefined){\n        cssTypeSuffix = 'game-message-type-' + messageType;\n    }\n\n    var htmlMessage = '<span class=\"game-message ' + cssTypeSuffix + '\"><span class=\"game-message-author\"> [' + author + ']</span> : ' + message + '</span>';\n    messagesBox.innerHTML += htmlMessage + '<br />';\n\n    messagesBox.scrollTop = messagesBox.scrollHeight;\n}\n\nfunction setMainPlayerName(nickName){\n    if(!nickName || nickName.length === 0){\n        return false;\n    }\n    mainPlayerName = escapeHtml(nickName);\n    return mainPlayerName;\n}\n\nfunction escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\nmodule.exports = {\n    init: init,\n    appendMessage: appendMessage,\n    systemMessage: appendSystemMessage,\n    setMainPlayerName: setMainPlayerName\n};","'use strict';\n\nvar containerElement, verticalOffset = 0, horizontalOffset = 0;\n\nfunction getY(y){\n    return y - verticalOffset;\n}\n\nfunction getX(x){\n    return x - horizontalOffset;\n}\n\n\nmodule.exports = {\n    init: function(game){\n        containerElement = document.getElementById(game.parent);\n        verticalOffset = game.height;\n    },\n\n    mediumPanel: function (x, y, cssClass){\n        if(!cssClass){\n            cssClass = '';\n        }\n        var panel = document.createElement('div');\n        panel.className = 'gui-panel gui-panel-medium ' + cssClass;\n        panel.style.left = getX(x) + 'px';\n        panel.style.top = getY(y) + 'px';\n\n        containerElement.appendChild(panel);\n\n        return panel;\n    },\n\n    form: function(onSaveCallback){\n        var form = document.createElement('form');\n        form.onsubmit= function(){\n            onSaveCallback();\n\n            return false;\n        };\n\n        return form;\n    },\n\n    inputBlock: function(){\n        var blockInput = document.createElement('div');\n        blockInput.className='game-input-block';\n        return blockInput;\n    },\n\n    inputWithLabel: function(parent, label, x, y){\n        var nameLabel = document.createElement('div');\n        nameLabel.className='game-gui-label';\n        nameLabel.innerText = label;\n\n\n        var nameInput = document.createElement('input');\n        nameInput.type = 'text';\n        nameInput.className = 'game-gui-input';\n\n        parent.appendChild(nameLabel);\n        parent.appendChild(nameInput);\n\n        return nameInput;\n    },\n\n    createButton: function(label, cssClass){\n        var button = document.createElement('button');\n        button.className = cssClass;\n\n        button.innerText = label;\n        return button;\n    },\n\n    createElement: function(elementName, className){\n        var element = document.createElement(elementName);\n        element.className = className;\n        return element;\n    },\n\n    addToContainer: function(element){\n        containerElement.appendChild(element);\n    },\n    getX: getX,\n    getY: getY\n\n};","'use strict';\n\n\nvar pathfinder;\n\nmodule.exports = {\n  init: function(game, walkableLayer, walkableLayerData, walkableTiles, tileSize){\n\n      this.walkableLayer = walkableLayer;\n      this.tileSize = tileSize;\n      pathfinder = game.plugins.add(Phaser.Plugin.PathFinderPlugin);\n      pathfinder.setGrid(walkableLayerData, walkableTiles);\n      \n  },\n    calculatePath: function(fromX, fromY, toX, toY, onPathReadyCallback){\n        var fromTiles = [this.getTileX(fromX), this.getTileY(fromY)];\n        var toTiles = [this.getTileX(toX), this.getTileY(toY)];\n        pathfinder.preparePathCalculation (fromTiles, toTiles,onPathReadyCallback );\n\n        pathfinder.calculatePath();\n    },\n\n    getTileX: function(value){\n        return this.walkableLayer.getTileX(value);\n    },\n    getTileY: function(value){\n        return this.walkableLayer.getTileY(value);\n    }\n};","'use strict';\n\nvar DomHelper = require('client/utils/DomHelper');\nvar scoreList;\n\n\nfunction init(){\n    var scoreContainer = DomHelper.createElement('div', 'game-scoreboard');\n    scoreContainer.style.left = DomHelper.getX(800) + 'px';\n    scoreContainer.style.top = DomHelper.getY(0) + 'px';\n\n    var title = document.createElement('h3');\n    title.innerHTML = 'Scores';\n\n    scoreList = DomHelper.createElement('ul', 'game-scorelist');\n\n    scoreContainer.appendChild(title);\n    scoreContainer.appendChild(scoreList);\n\n    DomHelper.addToContainer(scoreContainer);\n}\n\nfunction setScores(scores){\n    // empty the list\n    while (scoreList.firstChild) {\n        scoreList.removeChild(scoreList.firstChild);\n    }\n\n    scores.sort(orderByScore)\n          .forEach(addScoreElement);\n\n    function orderByScore(a, b) {\n        return parseFloat(b.score) - parseFloat(a.score);\n    }\n    function addScoreElement(scoreInfo){\n        var listElement = document.createElement('li');\n        listElement.innerHTML = '<strong>' + scoreInfo.nickname + '</strong>' + ' : ' + scoreInfo.score;\n\n        scoreList.appendChild(listElement);\n    }\n}\n\nmodule.exports = {\n    init: init,\n    setScores: setScores\n};","\"use strict\";\n\nvar Connection = function (addr, key) {\n    var ws = new WebSocket ('ws://'+addr+'/ws');\n    var brothers = new Set();\n    var connEvt = new Set();\n\n\tthis.on = function(evt, callback) {\n\t\tconnEvt[evt] = callback\n\t}\n\n    ws.onopen = function(evt){\n\t\t\tconsole.log('onopen');\n\t\t\tws.send(\"[HELO]\" + key);\n\t\t}\n\n    ws.onmessage = function(evt) {\n    \tswitch(evt.data.substr(0, 6))\n    \t{\n    \t\tcase \"[RDCT]\":\n    \t\t\treconnect(evt.data.substr(6))\n    \t\t\tbreak;\n    \t\tcase \"[FLBK]\":\n    \t\t\tobj = JSON.parse(evt.data.substr(6));\n    \t\t\tfor (var k in obj.BRTHLST){\n    \t\t\t    if (obj.BRTHLST.hasOwnProperty(k))\n    \t\t\t\t\t brothers.add(obj.BRTHLST[k].Httpaddr)\n    \t\t\t}\n    \t\t\tbreak;\n            case \"[BCST]\":\n                obj = JSON.parse(evt.data.substr(6));\n                // console.log(\"RCPT: \"+obj);\n\t\t\t\tconnEvt[\"enemy_move\"].call(this, obj);\n                break;\n\t\t\tcase \"[NUSR]\":\n\t\t\t\tobj = JSON.parse(evt.data.substr(6));\n\t\t\t\t// obj = evt.data.substr(6);\n                // console.log(\"RCPT: \"+obj);\n\t\t\t\tconnEvt[\"new_enemyPlayer\"].call(this, obj);\n\t\t\t\tbreak;\n\t\t\tcase \"[WLCM]\":\n\t\t\t\tpseudo = evt.data.substr(6);\n\t\t\t\tconnEvt[\"userlogged\"].call(this, pseudo);\n\t\t\t\tbreak;\n    \t\tdefault:;\n    \t}\n    }\n\n\tws.onclose = function(evt) {\n\t\tswitch(evt.code)\n\t\t{\n\t\t\tcase 1005:\n\t\t\t\tconsole.log(\"CLOSE By Client\");\n\t\t\t\tws = null;\n\t\t\t\tbreak;\n\t\t\tcase 1000:\n\t\t\t\tconsole.log(\"CLOSE By SERVER: \" + evt.reason);\n\t\t\t\tws = null;\n\t\t\t\tbreak;\n\t\t\tcase 1006:\n\t\t\tdefault:\n\t\t\t\t// console.log(\"Lost Connection: \" + evt.reason);\n\t\t\t\t// for (let item of brothers) {\n\t\t\t\t// \treconnect(item)\n\t\t\t\t// \tif (ws.readyState == 0) {\n\t\t\t\t// \t\tbrothers.delete(item)\n\t\t\t\t// \t}\n\t\t\t\t// \telse break;\n\t\t\t\t// }\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/*this.logon = function(pass) {\n        ws.send(\"[HELO]\" + pass);\n\t\t// connEvt[\"userlogged\"].call(this);\n\t}*/\n\n    this.bcast = function(message) {\n\t\t console.log(message);\n        ws.send(\"[BCST]\" + JSON.stringify(message))\n    }\n\n\tthis.newPlayer = function(message) {\n\t\t// console.log(message);\n        ws.send(\"[NUSR]\" + JSON.stringify(message))\n    }\n}\nmodule.exports = Connection;\n"]}